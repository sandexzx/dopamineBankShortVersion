import logging
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.callback_answer import CallbackAnswerMiddleware

import keyboards
import database
from datetime import datetime, timedelta
from contextlib import suppress
import asyncio

# –î–æ–±–∞–≤—å —ç—Ç–æ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ handlers.py
logging.getLogger('aiohttp').setLevel(logging.ERROR)

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
class TimerTask:
    def __init__(self, coro):
        self.coro = coro
        self.task = None
    
    async def __aenter__(self):
        self.task = asyncio.create_task(self.coro)
        return self.task
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if not self.task.done():
            self.task.cancel()
        
        try:
            await self.task
        except asyncio.CancelledError:
            pass

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_timers = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class RewardStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_cost = State()

class EditRewardStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_cost = State()

class SetPointsStates(StatesGroup):
    waiting_for_points = State()

class TaskStates(StatesGroup):
    waiting_for_name = State()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp):
    dp.include_router(router)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = database.get_user(message.from_user.id)
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –≠—Ç–æ –±–æ—Ç –î–æ—Ñ–∞–º–∏–Ω–æ–≤–æ–≥–æ –ë–∞–Ω–∫–∞.\n"
        f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –Ω–∏—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã.\n"
        f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å {user['points']} –±–∞–ª–ª–æ–≤.",
        reply_markup=keyboards.main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏
@router.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É")
async def start_task(message: Message, state: FSMContext):
    user = database.get_user(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    if user["active_task"]:
        start_time = datetime.fromtimestamp(user["active_task"]["start_time"])
        elapsed = datetime.now() - start_time
        minutes, seconds = divmod(elapsed.seconds, 60)
        hours, minutes = divmod(minutes, 60)
        
        time_str = f"{hours:02}:{minutes:02}:{seconds:02}"
        
        await message.answer(
            f"–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞!\n"
            f"–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {time_str}\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏:",
            reply_markup=keyboards.difficulty_menu()
        )
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await state.set_state(TaskStates.waiting_for_name)
    await message.answer(
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=None
    )

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∫–ª—é—á–∏ –ë–î
difficulty_map = {
    "–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è": "very_easy",
    "–ü—Ä–æ—Å—Ç–∞—è": "easy",
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è": "standard",
    "–ü–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏": "high",
    "–°–ª–æ–∂–Ω–∞—è": "hard",
    "–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∞—è": "catastrophic"
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ –≤—ã–±–æ—Ä—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
@router.message(F.text.in_(difficulty_map.keys()))
async def end_task(message: Message, state: FSMContext):
    user = database.get_user(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
    if not user["active_task"]:
        await message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏! –ù–∞–∂–º–∏ 'üöÄ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=keyboards.main_menu()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ë–î
    difficulty = difficulty_map[message.text]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    data = await state.get_data()
    task_name = data.get("task_name", "–ó–∞–¥–∞—á–∞")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
    result = database.end_task(message.from_user.id, difficulty, task_name)
    
    if not result:
        await message.answer(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=keyboards.main_menu()
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    time_delta = timedelta(seconds=result["seconds"])
    hours, remainder = divmod(time_delta.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    time_str = f"{hours:02}:{minutes:02}:{seconds:02}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(
        f"–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time_str}\n"
        f"üî¢ –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã: {result['base_points']}\n"
        f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {message.text} (x{result['multiplier']})\n"
        f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã: {result['final_points']}\n\n"
        f"–í—Å–µ–≥–æ —É —Ç–µ–±—è: {user['points']} –±–∞–ª–ª–æ–≤",
        reply_markup=keyboards.main_menu()
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
async def cancel_task(message: Message):
    user = database.get_user(message.from_user.id)
    
    if not user["active_task"]:
        await message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏!",
            reply_markup=keyboards.main_menu()
        )
        return
    
    user["active_task"] = None
    database.save_users()
    
    await message.answer(
        "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!",
        reply_markup=keyboards.main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    user = database.get_user(message.from_user.id)
    
    difficulty_names = {
        "very_easy": "–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è",
        "easy": "–ü—Ä–æ—Å—Ç–∞—è",
        "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è",
        "high": "–ü–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
        "hard": "–°–ª–æ–∂–Ω–∞—è",
        "catastrophic": "–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∞—è"
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficulty_stats = "\n".join([
        f"- {difficulty_names[diff]}: {count} –∑–∞–¥–∞—á" 
        for diff, count in user["difficulty_stats"].items() 
        if count > 0
    ]) or "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_tasks = database.get_today_tasks(message.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_tasks_text = ""
    if today_tasks:
        for task in today_tasks:
            duration = timedelta(seconds=int(task["duration"]))
            hours, remainder = divmod(duration.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            time_str = f"{hours:02}:{minutes:02}:{seconds:02}"
            
            today_tasks_text += f"\n‚Ä¢ #{task['id']} - {task['name']} "
            today_tasks_text += f"({difficulty_names[task['difficulty']]})\n"
            today_tasks_text += f"  ‚è±Ô∏è {time_str} | üí∞ {task['points']} –±–∞–ª–ª–æ–≤"
    else:
        today_tasks_text = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"
    
    stats_text = (
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üî¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {user['tasks_completed']}\n"
        f"üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: {user['points']}\n\n"
        f"üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n{difficulty_stats}\n\n"
        f"üìÜ –ó–∞–¥–∞—á–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{today_tasks_text}"
    )
    
    await message.answer(
        stats_text,
        reply_markup=keyboards.main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞–≥—Ä–∞–¥
@router.message(F.text == "üéÅ –ú–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥")
async def rewards_menu_handler(message: Message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—á–∏—Ç–∞–µ–º –≤–∞—Å –∏ –≤–∞—à—É –¥–µ–≤—É—à–∫—É –∞–¥–º–∏–Ω–∞–º–∏)
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –ë–î –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–µ
    is_admin = True  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    await message.answer(
        "üéÅ –ú–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏.",
        reply_markup=keyboards.rewards_menu(is_admin)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥
@router.message(F.text == "üõçÔ∏è –°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥")
async def list_rewards(message: Message):
    user_id = message.from_user.id
    rewards = database.get_rewards(user_id)
    user = database.get_user(user_id)
    
    if not rewards:
        await message.answer(
            "–£ —Ç–µ–±—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö!",
            reply_markup=keyboards.rewards_menu(True)
        )
        return
    
    await message.answer(
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã (—É —Ç–µ–±—è {user['points']} –±–∞–ª–ª–æ–≤):"
        f"‚úÖ - –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
        f"‚ùå - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤",
        reply_markup=keyboards.rewards_inline_keyboard(rewards, user["points"])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "‚û°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    await message.answer(
        "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=keyboards.main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É")
async def add_reward_handler(message: Message, state: FSMContext):
    await state.set_state(RewardStates.waiting_for_name)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã:",
        reply_markup=None
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
@router.message(StateFilter(RewardStates.waiting_for_name))
async def process_reward_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(RewardStates.waiting_for_cost)
    
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥—ã (–≤ –±–∞–ª–ª–∞—Ö, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞–≥—Ä–∞–¥—ã
@router.message(StateFilter(RewardStates.waiting_for_cost))
async def process_reward_cost(message: Message, state: FSMContext):
    try:
        cost = int(message.text)
        
        if cost <= 0:
            await message.answer(
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return
            
        data = await state.get_data()
        name = data["name"]
        user_id = message.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        reward_id = database.add_reward(user_id, name, cost)
        
        await message.answer(
            f"–ù–∞–≥—Ä–∞–¥–∞ '{name}' —Å —Ü–µ–Ω–æ–π {cost} –±–∞–ª–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=keyboards.rewards_menu(True)
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞–≥—Ä–∞–¥—ã:"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã
@router.callback_query(F.data.startswith("buy_"))
async def buy_reward_handler(callback: CallbackQuery):
    reward_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    rewards = database.get_rewards(user_id)
    
    if reward_id not in rewards:
        await callback.answer("–≠—Ç–∞ –Ω–∞–≥—Ä–∞–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    reward = rewards[reward_id]
    user = database.get_user(user_id)
    
    if user["points"] < reward["cost"]:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π –Ω–∞–≥—Ä–∞–¥—ã!")
        return
    
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å '{reward['name']}' –∑–∞ {reward['cost']} –±–∞–ª–ª–æ–≤?",
        reply_markup=keyboards.confirm_purchase(reward_id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
@router.callback_query(F.data.startswith("confirm_buy_"))
async def confirm_buy_handler(callback: CallbackQuery):
    reward_id = callback.data.split("_")[2]
    user_id = callback.from_user.id
    
    success, message = database.buy_reward(user_id, reward_id)
    
    if success:
        await callback.message.edit_text(
            f"{message} –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–µ–π –Ω–∞–≥—Ä–∞–¥–æ–π! üéâ"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=keyboards.rewards_menu(True)
        )
    else:
        await callback.message.edit_text(
            f"–û—à–∏–±–∫–∞: {message}",
            reply_markup=keyboards.rewards_menu(True)
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
@router.callback_query(F.data == "cancel_purchase")
async def cancel_purchase_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=keyboards.rewards_menu(True)
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
@router.callback_query(F.data.startswith("edit_"))
async def edit_reward_handler(callback: CallbackQuery, state: FSMContext):
    reward_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    rewards = database.get_rewards(user_id)
    
    if reward_id not in rewards:
        await callback.answer("–≠—Ç–∞ –Ω–∞–≥—Ä–∞–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    reward = rewards[reward_id]
    
    await state.update_data(reward_id=reward_id, user_id=user_id)
    await state.set_state(EditRewardStates.waiting_for_name)
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã '{reward['name']}' "
        f"(–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ):"
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(StateFilter(EditRewardStates.waiting_for_name))
async def process_edit_name(message: Message, state: FSMContext):
    name = None if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    
    await state.update_data(new_name=name)
    await state.set_state(EditRewardStates.waiting_for_cost)
    
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –±–∞–ª–ª–∞—Ö "
        "(–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω—é—é):"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
@router.message(StateFilter(EditRewardStates.waiting_for_cost))
async def process_edit_cost(message: Message, state: FSMContext):
    try:
        cost = None
        
        if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            cost = int(message.text)
            if cost <= 0:
                await message.answer(
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                )
                return
        
        data = await state.get_data()
        reward_id = data["reward_id"]
        user_id = data.get("user_id", message.from_user.id)
        new_name = data.get("new_name")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        success = database.update_reward(user_id, reward_id, new_name, cost)
        
        if success:
            await message.answer(
                "–ù–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=keyboards.rewards_menu(True)
            )
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã",
                reply_markup=keyboards.rewards_menu(True)
            )
        
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞–≥—Ä–∞–¥—ã –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
@router.callback_query(F.data.startswith("delete_"))
async def delete_reward_handler(callback: CallbackQuery):
    reward_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    rewards = database.get_rewards(user_id)
    
    if reward_id not in rewards:
        await callback.answer("–≠—Ç–∞ –Ω–∞–≥—Ä–∞–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    reward = rewards[reward_id]
    
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É '{reward['name']}'?",
        reply_markup=keyboards.confirm_delete(reward_id)
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_handler(callback: CallbackQuery):
    reward_id = callback.data.split("_")[2]
    user_id = callback.from_user.id
    
    success = database.delete_reward(user_id, reward_id)
    
    if success:
        await callback.message.edit_text(
            "–ù–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=keyboards.rewards_menu(True)
        )
    else:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã",
            reply_markup=keyboards.rewards_menu(True)
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "cancel_delete")
async def cancel_delete_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=keyboards.rewards_menu(True)
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–≥—Ä–∞–¥
@router.callback_query(F.data == "back_to_rewards_menu")
async def back_to_rewards_menu_handler(callback: CallbackQuery):
    await callback.message.delete()
    
    await callback.message.answer(
        "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –Ω–∞–≥—Ä–∞–¥",
        reply_markup=keyboards.rewards_menu(True)
    )
    
    await callback.answer()

async def update_timer(user_id, message_id, chat_id, bot, task_name="–ó–∞–¥–∞—á–∞"):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞ –∏ –±–∞–ª–ª–æ–≤"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = database.get_user(user_id)
            if not user["active_task"]:
                break
                
            # –†–∞—Å—á–µ—Ç—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ
            start_time = datetime.fromtimestamp(user["active_task"]["start_time"])
            elapsed = datetime.now() - start_time
            seconds = elapsed.total_seconds()
            hours, remainder = divmod(int(seconds), 3600)
            minutes, seconds = divmod(remainder, 60)
            
            base_points = int(elapsed.total_seconds() / 5)
            
            timer_str = f"üîñ –ó–∞–¥–∞—á–∞: {task_name}\n"
            timer_str += f"‚è±Ô∏è –°–µ–∫—É–Ω–¥–æ–º–µ—Ä: {hours:02}:{minutes:02}:{seconds:02}\n"
            timer_str += f"üí∞ –ë–∞–ª–ª—ã: {base_points}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            with suppress(Exception):
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=timer_str,
                    reply_markup=keyboards.timer_control_inline()
                )
            
            await asyncio.sleep(1)
    except asyncio.CancelledError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏
        pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"
@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É")
async def finish_task_handler(message: Message):
    user_id = message.from_user.id
    user = database.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
    if not user["active_task"]:
        await message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏!",
            reply_markup=keyboards.main_menu()
        )
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if user_id in active_timers:
        active_timers[user_id].cancel()
        del active_timers[user_id]
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏:",
        reply_markup=keyboards.difficulty_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ –≤ –º–µ–Ω—é —Ç–∞–π–º–µ—Ä–∞
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
async def cancel_task_handler(message: Message):
    user_id = message.from_user.id
    user = database.get_user(user_id)
    
    if not user["active_task"]:
        await message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏!",
            reply_markup=keyboards.main_menu()
        )
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if user_id in active_timers:
        active_timers[user_id].cancel()
        del active_timers[user_id]
    
    user["active_task"] = None
    database.save_users()
    
    await message.answer(
        "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! üëÄ",
        reply_markup=keyboards.main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É" –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.callback_query(F.data == "finish_task")
async def finish_task_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = database.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
    if not user["active_task"]:
        await callback.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏!")
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if user_id in active_timers:
        active_timers[user_id].cancel()
        del active_timers[user_id]
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    await callback.message.reply(
        "–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏:",
        reply_markup=keyboards.difficulty_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É" –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.callback_query(F.data == "cancel_task")
async def cancel_task_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = database.get_user(user_id)
    
    if not user["active_task"]:
        await callback.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏!")
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if user_id in active_timers:
        active_timers[user_id].cancel()
        del active_timers[user_id]
    
    user["active_task"] = None
    database.save_users()
    
    await callback.message.reply(
        "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! üëÄ",
        reply_markup=keyboards.main_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@router.message(F.text == "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def change_balance_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = database.get_user(user_id)
    
    await state.set_state(SetPointsStates.waiting_for_points)
    await message.answer(
        f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['points']} –±–∞–ª–ª–æ–≤.\n"
        f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤
@router.message(StateFilter(SetPointsStates.waiting_for_points))
async def process_points(message: Message, state: FSMContext):
    try:
        points = int(message.text)
        
        if points < 0:
            await message.answer(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:"
            )
            return
        
        user_id = message.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_balance = database.update_user_points(user_id, points)
        
        await message.answer(
            f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! üéâ\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –±–∞–ª–ª–æ–≤.",
            reply_markup=keyboards.main_menu()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–≠–π, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ–µ—Ä–∫–∏):"
        )

@router.message(StateFilter(TaskStates.waiting_for_name))
async def process_task_name(message: Message, state: FSMContext, bot: Bot):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await state.update_data(task_name=message.text)
    
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = database.start_task(message.from_user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–æ–º
    timer_message = await message.answer(
        f"üîñ –ó–∞–¥–∞—á–∞: {message.text}\n"
        f"‚è±Ô∏è –°–µ–∫—É–Ω–¥–æ–º–µ—Ä: 00:00:00\n"
        f"üí∞ –ë–∞–ª–ª—ã: 0",
        reply_markup=keyboards.timer_control_inline()
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞
    user_id = message.from_user.id
    if user_id in active_timers:
        active_timers[user_id].cancel()

    active_timers[user_id] = asyncio.create_task(
        update_timer(user_id, timer_message.message_id, message.chat.id, bot, message.text)
    )

@router.callback_query(F.data == "finish_task")
async def finish_task_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = database.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
    if not user["active_task"]:
        await callback.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    data = await state.get_data()
    task_name = data.get("task_name", "–ó–∞–¥–∞—á–∞")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if user_id in active_timers:
        active_timers[user_id].cancel()
        del active_timers[user_id]
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    await callback.message.reply(
        "–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏:",
        reply_markup=keyboards.difficulty_menu()
    )
    await callback.answer()

# –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ handlers.py
async def shutdown_timers():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    for timer in active_timers.values():
        timer.cancel()
    active_timers.clear()
    logging.info("–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    await asyncio.sleep(0.1)